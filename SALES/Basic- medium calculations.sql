use geeks;

/** MOM sales **/
WITH MonthlySales AS (SELECT  date_format(`Order Date`,'%Y-%m') as MONTH, SUM(Sales) AS TOTAL_SALES
FROM SAMPLESTORE GROUP BY DATE_FORMAT(`Order Date`,'%Y-%m')
),
SalesWithChange AS (SELECT Month, Total_Sales,
LAG(Total_Sales) OVER (ORDER BY Month) AS Previous_Sales
FROM MonthlySales)
SELECT Month, Total_Sales,
(CASE
    WHEN Previous_Sales IS NOT NULL 
    THEN 
		((Total_Sales - Previous_Sales) / Previous_Sales) * 100
ELSE NULL
END) AS MoM_Change
FROM SalesWithChange;

/** cum sales by product name **/
SELECT `PRODUCT NAME` , SUM(SALES) OVER (PARTITION BY `PRODUCT NAME` ORDER BY `ORDER DATE`  ) AS CUMM_SALES
FROM SAMPLESTORE ;

SELECT `PRODUCT NAME` , SUM(SALES) AS TOTAL_SALES FROM SAMPLESTORE 
group by `PRODUCT NAME` ORDER BY TOTAL_SALES;

/** calculate yearly growth in sales **/
WITH YEARLY_SALES AS (SELECT EXTRACT(YEAR FROM `ORDER DATE`) AS YEAR ,
SUM(SALES) AS TOTAL_SALES FROM SAMPLESTORE
GROUP BY EXTRACT(YEAR FROM `ORDER DATE`)
)
SELECT YEAR,TOTAL_SALES,LAG(TOTAL_SALES) OVER (ORDER BY YEAR) AS PREVIOUS_YEAR_SALES,
((TOTAL_SALES - LAG(TOTAL_SALES) OVER (ORDER BY YEAR))/LAG(TOTAL_SALES) OVER (ORDER BY YEAR))* 100 AS 
SALES_GROWTH 
FROM YEARLY_SALES;

WITH YEARLY_SALES AS (SELECT YEAR(`ORDER DATE`) AS YEAR,SUM(SALES) AS TOTAL_SALES FROM SAMPLESTORE GROUP BY YEAR)
SELECT YEAR, TOTAL_SALES , LAG(TOTAL_SALES) OVER (ORDER BY YEAR) AS PREVIOUS_YEAR_SALES,
((TOTAL_SALES - LAG(TOTAL_SALES) OVER (ORDER BY YEAR))/LAG(TOTAL_SALES) OVER (ORDER BY YEAR))*100 AS SALES_GROWTH
FROM YEARLY_SALES;


/** find the most recent sale for each product **/
SELECT * FROM SAMPLESTORE;
SELECT `PRODUCT NAME` ,MAX(`ORDER DATE`) AS RECENT_ORDER FROM SAMPLESTORE 
GROUP BY `PRODUCT NAME`;

/** Calculate Moving Average FOR EVERY 3 MONTHS **/
SELECT * FROM SAMPLESTORE;
SELECT `ORDER DATE` , SALES , AVG(SALES) OVER (ORDER BY `ORDER DATE` ROWS BETWEEN 2 preceding AND CURRENT ROW ) AS MOVING_AVERAGE
FROM SAMPLESTORE;

/** Calculate the Difference Between Current and Previous Rows **/
SELECT * FROM SAMPLESTORE;
SELECT `ORDER ID` , SALES , SALES - LAG(SALES) OVER (ORDER BY `ORDER ID`) AS DIFFERENCE
FROM SAMPLESTORE;

USE GEEKS;
SHOW TABLES;
SELECT * FROM SAMPLESTORE;

-- Step 1: Generate the last 7 days from the fixed date
WITH DateRange AS (
    SELECT DATE_sub('2016-01-07',INTERVAL n DAY) AS OrderDate
    FROM (SELECT 0 AS n UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL 
          SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6) AS Numbers
)
-- Step 2: Calculate daily revenue
SELECT 
    d.OrderDate,
    COALESCE(SUM(o.Sales), 0) AS TotalRevenue
FROM 
    DateRange d
LEFT JOIN 
    SAMPLESTORE o ON d.OrderDate = o.`Order Date`
GROUP BY 
    d.OrderDate
ORDER BY 
    d.OrderDate DESC;
    

/** CTE **/
use geeks;
select * from samplestore;

-- FIND GREATER THAN 200 SALES FROM CORPORATE ONLY 
WITH CUST_COR AS (SELECT `Order ID`,`City`,`Sales` FROM SAMPLESTORE WHERE SEGMENT = 'Corporate')
SELECT `Order ID`,`City` from CUST_COR WHERE `Sales` > 50 ORDER  BY `Sales`;

SELECT `Order ID`,`City` FROM SAMPLESTORE WHERE Sales > 200 AND SEGMENT = 'Corporate';

-- Find the third highest sale from the samplestore table using DENSE_RANK--
WITH SALERANK AS (SELECT SALES ,DENSE_RANK() OVER (ORDER BY SALES DESC) AS RANK_SALE
FROM SAMPLESTORE)
SELECT * FROM SALERANK WHERE RANK_SALE = 3;


SELECT SUM(t.amount * c.commission_rate / 100) AS total_commission
FROM transaction t
JOIN customer cu ON t.customer_id = cu.id
JOIN country c ON cu.country_id = c.id;
